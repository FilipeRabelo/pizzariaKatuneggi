yarn dev - npm run dev

OBS: -- para trabalhar com TYPESCRIP precisamos instalar as tipagens dependendo da biblioteca
        @types/


inicio:

cria pasta backend
cria pasta src e dentro da pasta src cria:
    - arquivo server.ts
    - arquivo routes.ts

-> dentro da pasta backend:
    - npm init -y

-> usar o typescript em desenvolvimento - qndo fizer o bild em producao ele vira o js
    - yarn add typescript -D

-> Express pra usar as Apis
    -yarn add express

-> Instalar as tiagens do express
    - yarn add @type/express -D

-> Pra inicializar o typescript
    - yarn tsc --init

- Para rodar o typescript (biblioteca ts-node-dev / nodermom atualiza a pagina )
    - yarn add ts-node-dev -D

Comando start dentro da pagina package.json:

scripts": {
    "dev": "ts-node-dev src/server.ts"
  },

- Pode também deixar seu script start apenas para fazer compilar e dar o start, deixando ele assim:

    "dev": "ts-node-dev --transpile-only src/server.ts"

obs:
    -- transpile-only`**:D iz para transpilar o código TypeScript para JavaScript sem fazer verificações
       completas de tipo (`type-checking`).
    -- Isso pode acelerar o processo de desenvolvimento porque ignora a verificação de tipos, que pode ser
        lenta em projetos maiores.
    -- No entanto, isso significa que alguns erros de tipo podem não ser capturados até que você faça uma
        transpilação completa com o `tsc`.

--------------------------------------------------

node.js com npm

    - npm init -y
    - npm install express --save
    - npm install nodemon --save-dev
    - npm install express-async-errors --save
    - npm install sqlite3 sqlite --save
    - npm install bcryptjs --save


inicio yarn - pizzaria

    obs: tudo dentro da pasta backend

    - npm init -y
    - yarn add typescript -D
    - yarn add express
    - yarn add @type/express -D         / instalar as tipagens do typescript
    - yarn tsc --init                   / para rodar o typescript
    - yarn add ts-node-dev -D           / nodemon - atualizar pagina auto
    - yarn add express-async-errors     / para tratar errors
    - yarn add cors                     / par liberar qualquer ip para fazer requisiçâo
    - yarn add @types/cors -D           / tipagens do cors
    - yarn add prisma                   / instalar o prisma
    - yarn add @prisma/client           / para lidar os models usuários, criar, atualizar tudo pelo prisma client
    - npx prisma init                   / para iniciar o prisma
    - yarn add bcryptjs                 / para criptografar a senha no BD
    - yarn add @types/bcryptjs -D       / instalar as tipagens do typescript
    - yarn add jsonwebtoken             / JWT token
    - yarn add @types/jsonwebtoken - D  / instalar as tipagens do JWT token
    - yarn add dotenv                   / para acessar as variaveis do sistema -> .env
    - yarn add multer                   / biblioteca para trabalhar com imagens
    - yarn add @types/multer -D         / instalar as tipagens do typescript




* primeiro criar usuários -> controllers e services * fazer os controllers separados
* controller pega nossa requisição

* dentro do controller agente inicia o serviço

    - agente chama um controller e o controller vai chamar um service que vai fazer o
    algorithm e alguma funcionalidade do banco de dados

    - o controller vai receber diretamente a requisição - nele que vamos pegar os parameters da
    requisição e vai chamar o serviço, repassando os dados necessarios


    * services trabalha com a manipulação do banco de dados
    * services vai trazer a funcionalidade de trabalhar com o BD, fazer validações
OBS: -- sao os serviços q tem a responsabilidade de ir buscar no banco de dados
     -- primeiro comeca pelos serviços - depois controllers - e depois cria as rotas


    * CreateUserService.ts - funcionalidade p criar o usuário

    -- qndo alguem faz a requisicao ele chama esse controller
    -- controller os dados do doby os dados que o usuario enviou
    -- chama o serviço repassando os dados pra ele
    -- o serviço vai receber os dados do nome, email, password etc enviados pelo usaurio
    -- cadastra no BD e devbolve a resposta que eu quiser para o usuario

-- TOKEN JWT

importante:   -- se passar nas validações e se estou logando preciso gerar
                 um token JWT e devolver os dados do usuário como id, name e email

              -- JWT server para autenticar usuarios em aplicacaoes REST onde usamos JSON - API.REST
              -- usa par aortas privadas por ex -


middlewares:  -- middlewares em React (ou na sua stack) são funções que podem interceptar e processar dados ou
            ações em determinado ponto do fluxo de dados ou execução do aplicativo,
            permitindo adicionar lógica customizada antes ou depois de certas operações.

            middlewares e rotas privadas

















